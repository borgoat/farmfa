// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ErrorCode.
const (
	ErrorCodeInvalidTOTPSecret ErrorCode = "InvalidTOTPSecret"
)

// AddToc defines model for AddToc.
type AddToc struct {

	// The constituent's Toc encrypted with the session's public key
	EncryptedToc string `json:"encrypted_toc"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for Error.Code.
type ErrorCode string

// NewSession defines model for NewSession.
type NewSession struct {

	// A Toc is a "piece" in which a TOTP secret gets split.
	TocZero Toc `json:"toc_zero"`

	// Seconds until the TOTP generation endpoint expires, starting from the first TOTP generated.
	Ttl *int `json:"ttl,omitempty"`
}

// Session defines model for Session.
type Session struct {

	// True when enough Tocs have been provided and TOTPs may be generated
	Complete bool `json:"complete"`

	// The time when the session started
	CreatedAt time.Time `json:"created_at"`

	// When the sessions will expire and no longer accept Tocs
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// The identifier of a session
	Id string `json:"id"`

	// An identifier for the group of Tocs used in this session
	TocGroupId string `json:"toc_group_id"`

	// The total number of Tocs in the group
	TocsInGroup int `json:"tocs_in_group"`

	// The number of Tocs already provided by consituents to the oracle for this session
	TocsProvided int `json:"tocs_provided"`

	// The minimum number of Tocs required
	TocsThreshold int `json:"tocs_threshold"`

	// Seconds until the TOTP generation endpoint expires, starting from the first token generated.
	Ttl *int `json:"ttl,omitempty"`
}

// SessionCredentials defines model for SessionCredentials.
type SessionCredentials struct {
	// Embedded struct due to allOf(#/components/schemas/Session)
	Session `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/SessionTocEncryptionKey)
	SessionTocEncryptionKey `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/SessionKeyEncryptionKey)
	SessionKeyEncryptionKey `yaml:",inline"`
}

// SessionKeyEncryptionKey defines model for SessionKeyEncryptionKey.
type SessionKeyEncryptionKey struct {

	// A key used to encrypt the Toc encryption key held by the oracle.
	// This key is kept by the applicant and shared when a TOTP is generated.
	Kek []byte `json:"kek"`
}

// SessionTocEncryptionKey defines model for SessionTocEncryptionKey.
type SessionTocEncryptionKey struct {

	// A public key used by constituents to encrypt their Tocs before sharing them with the oracle.
	// The applicant receives it when creating a sessions,
	// and must share it with constituents when requesting their approval.
	Tek string `json:"tek"`
}

// TOTPCode defines model for TOTPCode.
type TOTPCode struct {

	// The time when this session will expire and cannot be called again
	SessionExpiresAt time.Time `json:"session_expires_at"`

	// The current TOTP
	Totp string `json:"totp"`

	// The time when the current TOTP will expire
	TotpExpiresAt time.Time `json:"totp_expires_at"`
}

// A Toc is a "piece" in which a TOTP secret gets split.
type Toc struct {

	// Each Toc is part of a group. Tocs from the same group can reconstruct a secret
	GroupId string `json:"group_id"`

	// The number of Tocs in the group
	GroupSize int `json:"group_size"`

	// The nubmer of Tocs needed to reconstruct the secret
	GroupThreshold int `json:"group_threshold"`

	// Free-text to describe the purpose of a Toc
	Note *string `json:"note,omitempty"`

	// The actual share that players should keep secret
	Share string `json:"share"`

	// A Toc is unique, this ID ensures a Toc is not reused
	TocId string `json:"toc_id"`
}

// DefaultError defines model for DefaultError.
type DefaultError Error

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody NewSession

// PostTocJSONBody defines parameters for PostToc.
type PostTocJSONBody AddToc

// GenerateTotpJSONBody defines parameters for GenerateTotp.
type GenerateTotpJSONBody SessionKeyEncryptionKey

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// PostTocJSONRequestBody defines body for PostToc for application/json ContentType.
type PostTocJSONRequestBody PostTocJSONBody

// GenerateTotpJSONRequestBody defines body for GenerateTotp for application/json ContentType.
type GenerateTotpJSONRequestBody GenerateTotpJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSession request  with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostToc request  with any body
	PostTocWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostToc(ctx context.Context, id string, body PostTocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateTotp request  with any body
	GenerateTotpWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateTotp(ctx context.Context, id string, body GenerateTotpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTocWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTocRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostToc(ctx context.Context, id string, body PostTocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTocRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTotpWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTotpRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTotp(ctx context.Context, id string, body GenerateTotpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTotpRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTocRequest calls the generic PostToc builder with application/json body
func NewPostTocRequest(server string, id string, body PostTocJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTocRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostTocRequestWithBody generates requests for PostToc with any type of body
func NewPostTocRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/tocs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateTotpRequest calls the generic GenerateTotp builder with application/json body
func NewGenerateTotpRequest(server string, id string, body GenerateTotpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateTotpRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGenerateTotpRequestWithBody generates requests for GenerateTotp with any type of body
func NewGenerateTotpRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/totp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSession request  with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// GetSession request
	GetSessionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionResponse, error)

	// PostToc request  with any body
	PostTocWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTocResponse, error)

	PostTocWithResponse(ctx context.Context, id string, body PostTocJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTocResponse, error)

	// GenerateTotp request  with any body
	GenerateTotpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateTotpResponse, error)

	GenerateTotpWithResponse(ctx context.Context, id string, body GenerateTotpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateTotpResponse, error)
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionCredentials
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTocResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostTocResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTocResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTotpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TOTPCode
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GenerateTotpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTotpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// PostTocWithBodyWithResponse request with arbitrary body returning *PostTocResponse
func (c *ClientWithResponses) PostTocWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTocResponse, error) {
	rsp, err := c.PostTocWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTocResponse(rsp)
}

func (c *ClientWithResponses) PostTocWithResponse(ctx context.Context, id string, body PostTocJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTocResponse, error) {
	rsp, err := c.PostToc(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTocResponse(rsp)
}

// GenerateTotpWithBodyWithResponse request with arbitrary body returning *GenerateTotpResponse
func (c *ClientWithResponses) GenerateTotpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateTotpResponse, error) {
	rsp, err := c.GenerateTotpWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTotpResponse(rsp)
}

func (c *ClientWithResponses) GenerateTotpWithResponse(ctx context.Context, id string, body GenerateTotpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateTotpResponse, error) {
	rsp, err := c.GenerateTotp(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTotpResponse(rsp)
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostTocResponse parses an HTTP response from a PostTocWithResponse call
func ParsePostTocResponse(rsp *http.Response) (*PostTocResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTocResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateTotpResponse parses an HTTP response from a GenerateTotpWithResponse call
func ParseGenerateTotpResponse(rsp *http.Response) (*GenerateTotpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GenerateTotpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TOTPCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start a new session
	// (POST /sessions)
	CreateSession(ctx echo.Context) error
	// Retrieve a session details by its ID
	// (GET /sessions/{id})
	GetSession(ctx echo.Context, id string) error
	// Join a new Toc to an existing session
	// (POST /sessions/{id}/tocs)
	PostToc(ctx echo.Context, id string) error
	// Close the session and generate the TOTP
	// (POST /sessions/{id}/totp)
	GenerateTotp(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// GetSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSession(ctx, id)
	return err
}

// PostToc converts echo context to params.
func (w *ServerInterfaceWrapper) PostToc(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostToc(ctx, id)
	return err
}

// GenerateTotp converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateTotp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateTotp(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/sessions", wrapper.CreateSession)
	router.GET(baseURL+"/sessions/:id", wrapper.GetSession)
	router.POST(baseURL+"/sessions/:id/tocs", wrapper.PostToc)
	router.POST(baseURL+"/sessions/:id/totp", wrapper.GenerateTotp)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///B2/NGNhsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
